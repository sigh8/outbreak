from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random
from time import time
import copy
import numpy as np


# ------------- Basic Shape Drawing Algorithm -----------
def draw_point(x, y, s):
    glPointSize(s)  # pixel size
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()


class Line:
    def __init__(self, x1, y1,   x2, y2,    w=1, color=(1, 1, 1)):
        if abs(y1) > abs(y2):
            x1, y1, x2, y2 = x2, y2, x1, y1
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.w = w
        # self.color = color
        self.dx = x2 - x1
        self.dy = y2 - y1
        self.zone = self.findZone()
        if self.zone != 0:
            self.x1, self.y1, self.x2, self.y2 = self.convert_to_zone0(self.x1, self.y1, self.x2, self.y2)
        # glColor3f(*self.color)
        self.draw_line()

    def findZone(self):
        dx = self.dx
        dy = self.dy
        if abs(dx) >= abs(dy):  # Zone 0,3,4,7
            if dx >= 0:
                if dy >= 0:
                    return 0
                elif dy <= 0:
                    return 7
            elif dx <= 0:
                if dy >= 0:
                    return 3
                elif dy <= 0:
                    return 4
        else:                   # Zone 1,2,5,6
            if dx >= 0:
                if dy >= 0:
                    return 1
                elif dy <= 0:
                    return 6
            elif dx <= 0:
                if dy >= 0:
                    return 2
                elif dy <= 0:
                    return 5

    def convert_to_zone0(self, x1, y1, x2, y2):
        transformations = {
            1: (y1, x1, y2, x2),
            2: (y1, -x1, y2, -x2),
            3: (-x1, y1, -x2, y2),
            4: (-x1, -y1, -x2, -y2),
            5: (-y1, -x1, -y2, -x2),
            6: (-y1, x1, -y2, x2),
            7: (x1, -y1, x2, -y2)
        }
        return transformations[self.zone]

    def revert_to_original(self, x, y):
        reverse_transformations = {
            1: (y, x),
            2: (-y, x),
            3: (-x, y),
            4: (-x, -y),
            5: (-y, -x),
            6: (y, -x),
            7: (x, -y)
        }
        return reverse_transformations[self.zone]

    def draw_line(self):
        dx = self.x2 - self.x1
        dy = self.y2 - self.y1
        d = 2*dy - dx
        incE = 2*dy
        incNE = 2*(dy - dx)
        y = self.y1
        for x in range(self.x1, self.x2+1):
            if self.zone != 0:
                draw_point(*self.revert_to_original(x, y), self.w)
            else:
                draw_point(x, y, self.w)
            if d > 0:
                d = d + incNE
                y = y + 1
            else:
                d = d + incE


def draw_circle(h, k, r, w):
    x = 0
    y = r
    d = 1 - r
    while x <= y:
        if d <= 0:
            d += 2*x + 3
        else:
            d += 2*(x-y) + 5
            y -= 1
        x += 1
        draw_point(x+h, y+k, w)
        draw_point(-x+h, y+k, w)
        draw_point(x+h, -y+k, w)
        draw_point(-x+h, -y+k, w)
        draw_point(y+h, x+k, w)
        draw_point(-y+h, x+k, w)
        draw_point(y+h, -x+k, w)
        draw_point(-y+h, -x+k, w)


def draw_square(x1, y1,  x2, y2,  x3, y3,  x4, y4):
    a = Line(x1, y1,  x2, y2)
    b = Line(x2, y2,  x3, y3)
    c = Line(x3, y3,  x4, y4)
    d = Line(x4, y4,  x1, y1)


# -------------- Game Objects ------------
class Window:
    WIDTH = 500
    HEIGHT = 500
    X_AXIS = WIDTH // 2
    Y_AXIS = HEIGHT // 2
    COLORS = {
        "lightGrey": (0.827, 0.827, 0.827),
        "red": (1, 0, 0),
        "green": (0, 1, 0),
        'cyan': (0.0, 1.0, 1.0),
        'goldenrod': (0.855, 0.647, 0.125),
        'purple': (1.000, 0.000, 1.000),
        'sandyBrown': (0.957, 0.643, 0.376)
    }
    COLOR_CYCLE = ['green', 'red', 'goldenrod', 'purple',  'cyan', 'lightGrey' 'sandyBrown']
    WALL_LEFT = (-X_AXIS-5, -Y_AXIS-5, -X_AXIS+5, -Y_AXIS+5,
                 -X_AXIS+5, Y_AXIS, -X_AXIS-5, Y_AXIS)

    WALL_RIGHT = (X_AXIS-5, -Y_AXIS+5,  X_AXIS+5, -Y_AXIS-5,
                 X_AXIS+5, Y_AXIS,  X_AXIS-5, Y_AXIS)

    TOP = (-X_AXIS+5, Y_AXIS-65,  X_AXIS-5, Y_AXIS-65,
           X_AXIS-5, Y_AXIS-55, -X_AXIS+5, Y_AXIS-55)

    BOTTOM = (-X_AXIS-5, -Y_AXIS-5,  X_AXIS+5, -Y_AXIS-5,
              X_AXIS-5, -Y_AXIS+5, -X_AXIS+5, -Y_AXIS+5)


class Game:
    PAUSE = False
    OVER = False
    Score = 0
    T0 = 0
    T1 = 0
    LIFE = 3
    GROUND_ZERO = 0
    LEVEL = 1
    BOOSTER = ['purple', 'lightGrey']
    WALL_MODELS = {
        # 0: [[[-93, -126, 93, -126, 93, 76, -93, 76], 'cyan']],
        # 2: [[[-243, 2, -218, 2, -218, 16, -243, 16], 'green'],[[27, -52, 52, -52, 52, -38, 27, -38], 'goldenrod'], [[54, 38, 79, 38, 79, 52, 54, 52], 'goldenrod'], [[108, 56, 133, 56, 133, 70, 108, 70], 'cyan'], [[218, 2, 243, 2, 243, 16, 218, 16], 'purple']],
        1: [[[-243, 2, -218, 2, -218, 16, -243, 16], 'green'], [[-243, -16, -218, -16, -218, -2, -243, -2], 'green'], [[-216, 2, -191, 2, -191, 16, -216, 16], 'green'], [[-216, -16, -191, -16, -191, -2, -216, -2], 'green'], [[-189, 2, -164, 2, -164, 16, -189, 16], 'green'], [[-189, -16, -164, -16, -164, -2, -189, -2], 'green'], [[-162, 2, -137, 2, -137, 16, -162, 16], 'green'], [[-162, -16, -137, -16, -137, -2, -162, -2], 'green'], [[-135, 2, -110, 2, -110, 16, -135, 16], 'green'], [[-135, -16, -110, -16, -110, -2, -135, -2], 'green'], [[-108, 2, -83, 2, -83, 16, -108, 16], 'green'], [[-108, -16, -83, -16, -83, -2, -108, -2], 'green'], [[-81, 2, -56, 2, -56, 16, -81, 16], 'green'], [[-81, -16, -56, -16, -56, -2, -81, -2], random.choice(*BOOSTER)], [[-54, 2, -29, 2, -29, 16, -54, 16], 'green'], [[-54, -16, -29, -16, -29, -2, -54, -2], 'green'], [[-27, 2, -2, 2, -2, 16, -27, 16], 'green'], [[-27, -16, -2, -16, -2, -2, -27, -2], 'green'], [[0, 2, 25, 2, 25, 16, 0, 16], 'green'], [[0, -16, 25, -16, 25, -2, 0, -2], 'green'], [[27, 2, 52, 2, 52, 16, 27, 16], 'green'], [[27, -16, 52, -16, 52, -2, 27, -2], 'green'], [[54, 2, 79, 2, 79, 16, 54, 16], 'green'], [[54, -16, 79, -16, 79, -2, 54, -2], 'green'], [[81, 2, 106, 2, 106, 16, 81, 16], 'green'], [[81, -16, 106, -16, 106, -2, 81, -2], 'green'], [[108, 2, 133, 2, 133, 16, 108, 16], 'green'], [[108, -16, 133, -16, 133, -2, 108, -2], 'green'], [[135, 2, 160, 2, 160, 16, 135, 16], 'green'], [[135, -16, 160, -16, 160, -2, 135, -2], 'green'], [[162, 2, 187, 2, 187, 16, 162, 16], 'green'], [[162, -16, 187, -16, 187, -2, 162, -2], 'green'], [[189, 2, 214, 2, 214, 16, 189, 16], 'green'], [[189, -16, 214, -16, 214, -2, 189, -2], 'green'], [[216, 2, 241, 2, 241, 16, 216, 16], 'green'], [[216, -16, 241, -16, 241, -2, 216, -2], 'green'],
            [[-216, 20, -191, 20, -191, 34, -216, 34], 'red'], [[-216, -34, -191, -34, -191, -20, -216, -20], 'red'], [[-189, 20, -164, 20, -164, 34, -189, 34], 'red'], [[-189, -34, -164, -34, -164, -20, -189, -20], 'red'], [[-162, 20, -137, 20, -137, 34, -162, 34], 'red'], [[-162, -34, -137, -34, -137, -20, -162, -20], 'red'], [[-135, 20, -110, 20, -110, 34, -135, 34], 'red'], [[-135, -34, -110, -34, -110, -20, -135, -20], 'red'], [[-108, 20, -83, 20, -83, 34, -108, 34], 'red'], [[-108, -34, -83, -34, -83, -20, -108, -20], 'red'], [[-81, 20, -56, 20, -56, 34, -81, 34], 'red'], [[-81, -34, -56, -34, -56, -20, -81, -20], 'red'], [[-54, 20, -29, 20, -29, 34, -54, 34], 'red'], [[-54, -34, -29, -34, -29, -20, -54, -20], 'red'], [[-27, 20, -2, 20, -2, 34, -27, 34], 'red'], [[-27, -34, -2, -34, -2, -20, -27, -20], 'red'], [[0, 20, 25, 20, 25, 34, 0, 34], 'red'], [[0, -34, 25, -34, 25, -20, 0, -20], 'red'], [[27, 20, 52, 20, 52, 34, 27, 34], 'red'], [[27, -34, 52, -34, 52, -20, 27, -20], 'red'], [[54, 20, 79, 20, 79, 34, 54, 34], 'red'], [[54, -34, 79, -34, 79, -20, 54, -20], 'red'], [[81, 20, 106, 20, 106, 34, 81, 34], 'red'], [[81, -34, 106, -34, 106, -20, 81, -20], 'red'], [[108, 20, 133, 20, 133, 34, 108, 34], 'red'], [[108, -34, 133, -34, 133, -20, 108, -20], 'red'], [[135, 20, 160, 20, 160, 34, 135, 34], 'red'], [[135, -34, 160, -34, 160, -20, 135, -20], 'red'], [[162, 20, 187, 20, 187, 34, 162, 34], 'red'], [[162, -34, 187, -34, 187, -20, 162, -20], 'red'], [[189, 20, 214, 20, 214, 34, 189, 34], 'red'], [[189, -34, 214, -34, 214, -20, 189, -20], 'red'],
            [[-189, 38, -164, 38, -164, 52, -189, 52], 'goldenrod'], [[-189, -52, -164, -52, -164, -38, -189, -38], 'goldenrod'], [[-162, 38, -137, 38, -137, 52, -162, 52], 'goldenrod'], [[-162, -52, -137, -52, -137, -38, -162, -38], 'goldenrod'], [[-135, 38, -110, 38, -110, 52, -135, 52], 'goldenrod'], [[-135, -52, -110, -52, -110, -38, -135, -38], 'goldenrod'], [[-108, 38, -83, 38, -83, 52, -108, 52], 'goldenrod'], [[-108, -52, -83, -52, -83, -38, -108, -38], 'goldenrod'], [[-81, 38, -56, 38, -56, 52, -81, 52], 'goldenrod'], [[-81, -52, -56, -52, -56, -38, -81, -38], 'goldenrod'], [[-54, 38, -29, 38, -29, 52, -54, 52], 'goldenrod'], [[-54, -52, -29, -52, -29, -38, -54, -38], 'goldenrod'], [[-27, 38, -2, 38, -2, 52, -27, 52], 'goldenrod'], [[-27, -52, -2, -52, -2, -38, -27, -38], 'goldenrod'], [[0, 38, 25, 38, 25, 52, 0, 52], 'goldenrod'], [[0, -52, 25, -52, 25, -38, 0, -38], 'goldenrod'], [[27, 38, 52, 38, 52, 52, 27, 52], 'goldenrod'], [[27, -52, 52, -52, 52, -38, 27, -38], 'goldenrod'], [[54, 38, 79, 38, 79, 52, 54, 52], 'goldenrod'], [[54, -52, 79, -52, 79, -38, 54, -38], 'goldenrod'], [[81, 38, 106, 38, 106, 52, 81, 52], 'goldenrod'], [[81, -52, 106, -52, 106, -38, 81, -38], 'goldenrod'], [[108, 38, 133, 38, 133, 52, 108, 52], 'goldenrod'], [[108, -52, 133, -52, 133, -38, 108, -38], 'goldenrod'], [[135, 38, 160, 38, 160, 52, 135, 52], 'goldenrod'], [[135, -52, 160, -52, 160, -38, 135, -38], 'goldenrod'], [[162, 38, 187, 38, 187, 52, 162, 52], 'goldenrod'], [[162, -52, 187, -52, 187, -38, 162, -38], 'goldenrod'],
            [[-162, 56, -137, 56, -137, 70, -162, 70], 'cyan'], [[-162, -70, -137, -70, -137, -56, -162, -56], 'cyan'], [[-135, 56, -110, 56, -110, 70, -135, 70], 'cyan'], [[-135, -70, -110, -70, -110, -56, -135, -56], 'cyan'], [[-108, 56, -83, 56, -83, 70, -108, 70], 'cyan'], [[-108, -70, -83, -70, -83, -56, -108, -56], 'cyan'], [[-81, 56, -56, 56, -56, 70, -81, 70], 'cyan'], [[-81, -70, -56, -70, -56, -56, -81, -56], 'cyan'], [[-54, 56, -29, 56, -29, 70, -54, 70], 'cyan'], [[-54, -70, -29, -70, -29, -56, -54, -56], 'cyan'], [[-27, 56, -2, 56, -2, 70, -27, 70], 'cyan'], [[-27, -70, -2, -70, -2, -56, -27, -56], 'cyan'], [[0, 56, 25, 56, 25, 70, 0, 70], 'cyan'], [[0, -70, 25, -70, 25, -56, 0, -56], 'cyan'], [[27, 56, 52, 56, 52, 70, 27, 70], 'cyan'], [[27, -70, 52, -70, 52, -56, 27, -56], 'cyan'], [[54, 56, 79, 56, 79, 70, 54, 70], 'cyan'], [[54, -70, 79, -70, 79, -56, 54, -56], 'cyan'], [[81, 56, 106, 56, 106, 70, 81, 70], 'cyan'], [[81, -70, 106, -70, 106, -56, 81, -56], 'cyan'], [[108, 56, 133, 56, 133, 70, 108, 70], 'cyan'], [[108, -70, 133, -70, 133, -56, 108, -56], 'cyan'], [[135, 56, 160, 56, 160, 70, 135, 70], 'cyan'], [[135, -70, 160, -70, 160, -56, 135, -56], 'cyan']],

        2: [[[-122, 2, -97, 2, -97, 16, -122, 16], 'green'], [[-122, -2, -97, -2, -97, -16, -122, -16], 'green'], [[-95, 2, -70, 2, -70, 16, -95, 16], 'green'], [[-95, -2, -70, -2, -70, -16, -95, -16], 'green'], [[-68, 2, -43, 2, -43, 16, -68, 16], 'green'], [[-68, -2, -43, -2, -43, -16, -68, -16], 'green'], [[-41, 2, -16, 2, -16, 16, -41, 16], 'green'], [[-41, -2, -16, -2, -16, -16, -41, -16], 'green'],   [[13, 2, 38, 2, 38, 16, 13, 16], random.choice(*BOOSTER)], [[13, -2, 38, -2, 38, -16, 13, -16], 'green'], [[40, 2, 65, 2, 65, 16, 40, 16], 'green'], [[40, -2, 65, -2, 65, -16, 40, -16], 'green'], [[67, 2, 92, 2, 92, 16, 67, 16], 'green'], [[67, -2, 92, -2, 92, -16, 67, -16], 'green'], [[94, 2, 119, 2, 119, 16, 94, 16], 'green'], [[94, -2, 119, -2, 119, -16, 94, -16], 'green'],
            [[-149, 20, -124, 20, -124, 34, -149, 34], 'red'], [[-149, -20, -124, -20, -124, -34, -149, -34], 'red'], [[-122, 20, -97, 20, -97, 34, -122, 34], 'red'], [[-122, -20, -97, -20, -97, -34, -122, -34], 'red'], [[-95, 20, -70, 20, -70, 34, -95, 34], 'red'], [[-95, -20, -70, -20, -70, -34, -95, -34], 'red'], [[-68, 20, -43, 20, -43, 34, -68, 34], 'red'], [[-68, -20, -43, -20, -43, -34, -68, -34], 'red'], [[-41, 20, -16, 20, -16, 34, -41, 34], 'red'], [[-41, -20, -16, -20, -16, -34, -41, -34], 'red'], [[-14, 20, 11, 20, 11, 34, -14, 34], 'red'], [[-14, -20, 11, -20, 11, -34, -14, -34], 'red'], [[13, 20, 38, 20, 38, 34, 13, 34], 'red'], [[13, -20, 38, -20, 38, -34, 13, -34], 'red'], [[40, 20, 65, 20, 65, 34, 40, 34], 'red'], [[40, -20, 65, -20, 65, -34, 40, -34], 'red'], [[67, 20, 92, 20, 92, 34, 67, 34], 'red'], [[67, -20, 92, -20, 92, -34, 67, -34], 'red'], [[94, 20, 119, 20, 119, 34, 94, 34], 'red'], [[94, -20, 119, -20, 119, -34, 94, -34], 'red'], [[121, 20, 146, 20, 146, 34, 121, 34], 'red'], [[121, -20, 146, -20, 146, -34, 121, -34], 'red'],
            [[-230, 92, -205, 92, -205, 106, -230, 106], 'red'], [[-230, -92, -205, -92, -205, -106, -230, -106], 'red'], [[-203, 92, -178, 92, -178, 106, -203, 106], 'red'], [[-203, -92, -178, -92, -178, -106, -203, -106], 'red'], [[-176, 92, -151, 92, -151, 106, -176, 106], 'red'], [[-176, -92, -151, -92, -151, -106, -176, -106], 'red'], [[-149, 92, -124, 92, -124, 106, -149, 106], 'red'], [[-149, -92, -124, -92, -124, -106, -149, -106], 'red'], [[-122, 92, -97, 92, -97, 106, -122, 106], 'red'], [[-122, -92, -97, -92, -97, -106, -122, -106], 'red'], [[-95, 92, -70, 92, -70, 106, -95, 106], 'red'], [[-95, -92, -70, -92, -70, -106, -95, -106], 'red'], [[-68, 92, -43, 92, -43, 106, -68, 106], 'red'], [[-68, -92, -43, -92, -43, -106, -68, -106], 'red'], [[-41, 92, -16, 92, -16, 106, -41, 106], 'red'], [[-41, -92, -16, -92, -16, -106, -41, -106], 'red'], [[-14, 92, 11, 92, 11, 106, -14, 106], 'red'], [[-14, -92, 11, -92, 11, -106, -14, -106], 'red'], [[13, 92, 38, 92, 38, 106, 13, 106], 'red'], [[13, -92, 38, -92, 38, -106, 13, -106], 'red'], [[40, 92, 65, 92, 65, 106, 40, 106], 'red'], [[40, -92, 65, -92, 65, -106, 40, -106], 'red'], [[67, 92, 92, 92, 92, 106, 67, 106], 'red'], [[67, -92, 92, -92, 92, -106, 67, -106], 'red'], [[94, 92, 119, 92, 119, 106, 94, 106], 'red'], [[94, -92, 119, -92, 119, -106, 94, -106], 'red'], [[121, 92, 146, 92, 146, 106, 121, 106], 'red'], [[121, -92, 146, -92, 146, -106, 121, -106], 'red'], [[148, 92, 173, 92, 173, 106, 148, 106], 'red'], [[148, -92, 173, -92, 173, -106, 148, -106], 'red'], [[175, 92, 200, 92, 200, 106, 175, 106], 'red'], [[175, -92, 200, -92, 200, -106, 175, -106], 'red'], [[202, 92, 227, 92, 227, 106, 202, 106], 'red'], [[202, -92, 227, -92, 227, -106, 202, -106], 'red'],
            [[-230, 110, -205, 110, -205, 124, -230, 124], 'goldenrod'], [[-230, -110, -205, -110, -205, -124, -230, -124], 'goldenrod'], [[-203, 110, -178, 110, -178, 124, -203, 124], 'goldenrod'], [[-203, -110, -178, -110, -178, -124, -203, -124], 'goldenrod'], [[-176, 110, -151, 110, -151, 124, -176, 124], 'goldenrod'], [[-176, -110, -151, -110, -151, -124, -176, -124], 'goldenrod'], [[-149, 110, -124, 110, -124, 124, -149, 124], 'goldenrod'], [[-149, -110, -124, -110, -124, -124, -149, -124], 'goldenrod'], [[-122, 110, -97, 110, -97, 124, -122, 124], 'goldenrod'], [[-122, -110, -97, -110, -97, -124, -122, -124], 'goldenrod'], [[-95, 110, -70, 110, -70, 124, -95, 124], 'goldenrod'], [[-95, -110, -70, -110, -70, -124, -95, -124], 'goldenrod'], [[-68, 110, -43, 110, -43, 124, -68, 124], 'goldenrod'], [[-68, -110, -43, -110, -43, -124, -68, -124], 'goldenrod'], [[-41, 110, -16, 110, -16, 124, -41, 124], 'goldenrod'], [[-41, -110, -16, -110, -16, -124, -41, -124], 'goldenrod'], [[-14, 110, 11, 110, 11, 124, -14, 124], 'goldenrod'], [[-14, -110, 11, -110, 11, -124, -14, -124], 'goldenrod'], [[13, 110, 38, 110, 38, 124, 13, 124], 'goldenrod'], [[13, -110, 38, -110, 38, -124, 13, -124], 'goldenrod'], [[40, 110, 65, 110, 65, 124, 40, 124], 'goldenrod'], [[40, -110, 65, -110, 65, -124, 40, -124], 'goldenrod'], [[67, 110, 92, 110, 92, 124, 67, 124], 'goldenrod'], [[67, -110, 92, -110, 92, -124, 67, -124], 'goldenrod'], [[94, 110, 119, 110, 119, 124, 94, 124], 'goldenrod'], [[94, -110, 119, -110, 119, -124, 94, -124], 'goldenrod'], [[121, 110, 146, 110, 146, 124, 121, 124], 'goldenrod'], [[121, -110, 146, -110, 146, -124, 121, -124], 'goldenrod'], [[148, 110, 173, 110, 173, 124, 148, 124], 'goldenrod'], [[148, -110, 173, -110, 173, -124, 148, -124], 'goldenrod'], [[175, 110, 200, 110, 200, 124, 175, 124], 'goldenrod'], [[175, -110, 200, -110, 200, -124, 175, -124], 'goldenrod'], [[202, 110, 227, 110, 227, 124, 202, 124], 'goldenrod'], [[202, -110, 227, -110, 227, -124, 202, -124], 'goldenrod']],

        3: [[[-95, 2, -70, 2, -70, 16, -95, 16], 'green'], [[-95, -2, -70, -2, -70, -16, -95, -16], 'green'], [[-68, 2, -43, 2, -43, 16, -68, 16], 'green'], [[-68, -2, -43, -2, -43, -16, -68, -16], 'green'], [[-41, 2, -16, 2, -16, 16, -41, 16], 'green'], [[-41, -2, -16, -2, -16, -16, -41, -16], 'green'], [[-14, 2, 11, 2, 11, 16, -14, 16], 'green'], [[-14, -2, 11, -2, 11, -16, -14, -16], 'green'], [[13, 2, 38, 2, 38, 16, 13, 16], 'green'], [[13, -2, 38, -2, 38, -16, 13, -16], 'green'], [[40, 2, 65, 2, 65, 16, 40, 16], 'green'], [[40, -2, 65, -2, 65, -16, 40, -16], 'green'], [[67, 2, 92, 2, 92, 16, 67, 16], 'green'], [[67, -2, 92, -2, 92, -16, 67, -16], 'green'],
            [[-149, 38, -124, 38, -124, 52, -149, 52], 'goldenrod'], [[-149, -38, -124, -38, -124, -52, -149, -52], 'goldenrod'], [[-122, 38, -97, 38, -97, 52, -122, 52], 'goldenrod'], [[-122, -38, -97, -38, -97, -52, -122, -52], 'goldenrod'], [[-95, 38, -70, 38, -70, 52, -95, 52], 'goldenrod'], [[-95, -38, -70, -38, -70, -52, -95, -52], 'goldenrod'], [[-68, 38, -43, 38, -43, 52, -68, 52], 'goldenrod'], [[-68, -38, -43, -38, -43, -52, -68, -52], 'goldenrod'], [[-41, 38, -16, 38, -16, 52, -41, 52], 'goldenrod'], [[-41, -38, -16, -38, -16, -52, -41, -52], 'goldenrod'], [[-14, 38, 11, 38, 11, 52, -14, 52], 'goldenrod'], [[-14, -38, 11, -38, 11, -52, -14, -52], 'goldenrod'], [[13, 38, 38, 38, 38, 52, 13, 52], 'goldenrod'], [[13, -38, 38, -38, 38, -52, 13, -52], 'goldenrod'], [[40, 38, 65, 38, 65, 52, 40, 52], 'goldenrod'], [[40, -38, 65, -38, 65, -52, 40, -52], 'goldenrod'], [[67, 38, 92, 38, 92, 52, 67, 52], 'goldenrod'], [[67, -38, 92, -38, 92, -52, 67, -52], 'goldenrod'], [[94, 38, 119, 38, 119, 52, 94, 52], 'goldenrod'], [[94, -38, 119, -38, 119, -52, 94, -52], 'goldenrod'], [[121, 38, 146, 38, 146, 52, 121, 52], 'goldenrod'], [[121, -38, 146, -38, 146, -52, 121, -52], 'goldenrod'],
            [[-176, 56, -151, 56, -151, 70, -176, 70], 'cyan'], [[-176, -56, -151, -56, -151, -70, -176, -70], 'cyan'], [[-149, 56, -124, 56, -124, 70, -149, 70], 'cyan'], [[-149, -56, -124, -56, -124, -70, -149, -70], 'cyan'], [[-122, 56, -97, 56, -97, 70, -122, 70], 'cyan'], [[-122, -56, -97, -56, -97, -70, -122, -70], 'cyan'], [[-95, 56, -70, 56, -70, 70, -95, 70], 'cyan'], [[-95, -56, -70, -56, -70, -70, -95, -70], 'cyan'], [[-68, 56, -43, 56, -43, 70, -68, 70], random.choice(*BOOSTER)], [[-68, -56, -43, -56, -43, -70, -68, -70], 'cyan'], [[-41, 56, -16, 56, -16, 70, -41, 70], 'cyan'], [[-41, -56, -16, -56, -16, -70, -41, -70], 'cyan'], [[-14, 56, 11, 56, 11, 70, -14, 70], 'cyan'], [[-14, -56, 11, -56, 11, -70, -14, -70], 'cyan'], [[13, 56, 38, 56, 38, 70, 13, 70], 'cyan'], [[13, -56, 38, -56, 38, -70, 13, -70], 'cyan'], [[40, 56, 65, 56, 65, 70, 40, 70], 'cyan'], [[40, -56, 65, -56, 65, -70, 40, -70], 'cyan'], [[67, 56, 92, 56, 92, 70, 67, 70], 'cyan'], [[67, -56, 92, -56, 92, -70, 67, -70], 'cyan'], [[94, 56, 119, 56, 119, 70, 94, 70], 'cyan'], [[94, -56, 119, -56, 119, -70, 94, -70], 'cyan'], [[121, 56, 146, 56, 146, 70, 121, 70], 'cyan'], [[121, -56, 146, -56, 146, -70, 121, -70], 'cyan'], [[148, 56, 173, 56, 173, 70, 148, 70], 'cyan'], [[148, -56, 173, -56, 173, -70, 148, -70], 'cyan'],
            [[-203, 74, -178, 74, -178, 88, -203, 88], 'green'], [[-203, -74, -178, -74, -178, -88, -203, -88], 'green'], [[-176, 74, -151, 74, -151, 88, -176, 88], 'green'], [[-176, -74, -151, -74, -151, -88, -176, -88], 'green'], [[-149, 74, -124, 74, -124, 88, -149, 88], 'green'], [[-149, -74, -124, -74, -124, -88, -149, -88], 'green'], [[-122, 74, -97, 74, -97, 88, -122, 88], 'green'], [[-122, -74, -97, -74, -97, -88, -122, -88], 'green'], [[-95, 74, -70, 74, -70, 88, -95, 88], 'green'], [[-95, -74, -70, -74, -70, -88, -95, -88], 'green'], [[-68, 74, -43, 74, -43, 88, -68, 88], 'green'], [[-68, -74, -43, -74, -43, -88, -68, -88], 'green'], [[-41, 74, -16, 74, -16, 88, -41, 88], 'green'], [[-41, -74, -16, -74, -16, -88, -41, -88], 'green'], [[-14, 74, 11, 74, 11, 88, -14, 88], 'green'], [[-14, -74, 11, -74, 11, -88, -14, -88], 'green'], [[13, 74, 38, 74, 38, 88, 13, 88], 'green'], [[13, -74, 38, -74, 38, -88, 13, -88], 'green'], [[40, 74, 65, 74, 65, 88, 40, 88], 'green'], [[40, -74, 65, -74, 65, -88, 40, -88], 'green'], [[67, 74, 92, 74, 92, 88, 67, 88], 'green'], [[67, -74, 92, -74, 92, -88, 67, -88], 'green'], [[94, 74, 119, 74, 119, 88, 94, 88], 'green'], [[94, -74, 119, -74, 119, -88, 94, -88], 'green'], [[121, 74, 146, 74, 146, 88, 121, 88], 'green'], [[121, -74, 146, -74, 146, -88, 121, -88], 'green'], [[148, 74, 173, 74, 173, 88, 148, 88], 'green'], [[148, -74, 173, -74, 173, -88, 148, -88], 'green'], [[175, 74, 200, 74, 200, 88, 175, 88], 'green'], [[175, -74, 200, -74, 200, -88, 175, -88], 'green'],
            [[-230, 92, -205, 92, -205, 106, -230, 106], 'red'], [[-230, -92, -205, -92, -205, -106, -230, -106], 'red'], [[-203, 92, -178, 92, -178, 106, -203, 106], 'red'], [[-203, -92, -178, -92, -178, -106, -203, -106], 'red'], [[-176, 92, -151, 92, -151, 106, -176, 106], 'red'], [[-176, -92, -151, -92, -151, -106, -176, -106], 'red'], [[-149, 92, -124, 92, -124, 106, -149, 106], 'red'], [[-149, -92, -124, -92, -124, -106, -149, -106], 'red'], [[-122, 92, -97, 92, -97, 106, -122, 106], 'red'], [[-122, -92, -97, -92, -97, -106, -122, -106], 'red'], [[-95, 92, -70, 92, -70, 106, -95, 106], 'red'], [[-95, -92, -70, -92, -70, -106, -95, -106], 'red'], [[-68, 92, -43, 92, -43, 106, -68, 106], 'red'], [[-68, -92, -43, -92, -43, -106, -68, -106], 'red'], [[-41, 92, -16, 92, -16, 106, -41, 106], 'red'], [[-41, -92, -16, -92, -16, -106, -41, -106], 'red'], [[-14, 92, 11, 92, 11, 106, -14, 106], 'red'], [[-14, -92, 11, -92, 11, -106, -14, -106], 'red'], [[13, 92, 38, 92, 38, 106, 13, 106], 'red'], [[13, -92, 38, -92, 38, -106, 13, -106], 'red'], [[40, 92, 65, 92, 65, 106, 40, 106], 'red'], [[40, -92, 65, -92, 65, -106, 40, -106], 'red'], [[67, 92, 92, 92, 92, 106, 67, 106], 'red'], [[67, -92, 92, -92, 92, -106, 67, -106], 'red'], [[94, 92, 119, 92, 119, 106, 94, 106], 'red'], [[94, -92, 119, -92, 119, -106, 94, -106], 'red'], [[121, 92, 146, 92, 146, 106, 121, 106], 'red'], [[121, -92, 146, -92, 146, -106, 121, -106], 'red'], [[148, 92, 173, 92, 173, 106, 148, 106], 'red'], [[148, -92, 173, -92, 173, -106, 148, -106], 'red'], [[175, 92, 200, 92, 200, 106, 175, 106], 'red'], [[175, -92, 200, -92, 200, -106, 175, -106], 'red'], [[202, 92, 227, 92, 227, 106, 202, 106], 'red'], [[202, -92, 227, -92, 227, -106, 202, -106], 'red']],

        4: [[[-243, 2, -218, 2, -218, 16, -243, 16], 'green'], [[-243, -2, -218, -2, -218, -16, -243, -16], 'green'], [[-216, 2, -191, 2, -191, 16, -216, 16], 'green'], [[-216, -2, -191, -2, -191, -16, -216, -16], 'green'], [[-189, 2, -164, 2, -164, 16, -189, 16], 'green'], [[-189, -2, -164, -2, -164, -16, -189, -16], 'green'], [[-162, 2, -137, 2, -137, 16, -162, 16], 'green'], [[-162, -2, -137, -2, -137, -16, -162, -16], 'green'], [[-135, 2, -110, 2, -110, 16, -135, 16], 'green'], [[-135, -2, -110, -2, -110, -16, -135, -16], 'green'], [[-108, 2, -83, 2, -83, 16, -108, 16], 'green'], [[-108, -2, -83, -2, -83, -16, -108, -16], 'green'], [[-81, 2, -56, 2, -56, 16, -81, 16], 'green'], [[-81, -2, -56, -2, -56, -16, -81, -16], 'green'], [[-54, 2, -29, 2, -29, 16, -54, 16], 'green'], [[-54, -2, -29, -2, -29, -16, -54, -16], 'green'], [[-27, 2, -2, 2, -2, 16, -27, 16], 'green'], [[-27, -2, -2, -2, -2, -16, -27, -16], 'green'], [[0, 2, 25, 2, 25, 16, 0, 16], 'green'], [[0, -2, 25, -2, 25, -16, 0, -16], 'green'], [[27, 2, 52, 2, 52, 16, 27, 16], 'green'], [[27, -2, 52, -2, 52, -16, 27, -16], 'green'], [[54, 2, 79, 2, 79, 16, 54, 16], 'green'], [[54, -2, 79, -2, 79, -16, 54, -16], 'green'], [[81, 2, 106, 2, 106, 16, 81, 16], 'green'], [[81, -2, 106, -2, 106, -16, 81, -16], 'green'], [[108, 2, 133, 2, 133, 16, 108, 16], 'green'], [[108, -2, 133, -2, 133, -16, 108, -16], 'green'], [[135, 2, 160, 2, 160, 16, 135, 16], 'green'], [[135, -2, 160, -2, 160, -16, 135, -16], 'green'], [[162, 2, 187, 2, 187, 16, 162, 16], 'green'], [[162, -2, 187, -2, 187, -16, 162, -16], 'green'], [[189, 2, 214, 2, 214, 16, 189, 16], 'green'], [[189, -2, 214, -2, 214, -16, 189, -16], 'green'], [[216, 2, 241, 2, 241, 16, 216, 16], 'green'], [[216, -2, 241, -2, 241, -16, 216, -16], 'green'],
            [[-216, 20, -191, 20, -191, 34, -216, 34], 'red'], [[-216, -20, -191, -20, -191, -34, -216, -34], 'red'], [[-189, 20, -164, 20, -164, 34, -189, 34], 'red'], [[-189, -20, -164, -20, -164, -34, -189, -34], 'red'], [[-162, 20, -137, 20, -137, 34, -162, 34], random.choice(*BOOSTER)], [[-162, -20, -137, -20, -137, -34, -162, -34], 'red'], [[-135, 20, -110, 20, -110, 34, -135, 34], 'red'], [[-135, -20, -110, -20, -110, -34, -135, -34], 'red'], [[-108, 20, -83, 20, -83, 34, -108, 34], 'red'], [[-108, -20, -83, -20, -83, -34, -108, -34], 'red'], [[-81, 20, -56, 20, -56, 34, -81, 34], 'red'], [[-81, -20, -56, -20, -56, -34, -81, -34], 'red'], [[-54, 20, -29, 20, -29, 34, -54, 34], 'red'], [[-54, -20, -29, -20, -29, -34, -54, -34], 'red'], [[-27, 20, -2, 20, -2, 34, -27, 34], 'red'], [[-27, -20, -2, -20, -2, -34, -27, -34], 'red'], [[0, 20, 25, 20, 25, 34, 0, 34], 'red'], [[0, -20, 25, -20, 25, -34, 0, -34], 'red'], [[27, 20, 52, 20, 52, 34, 27, 34], 'red'], [[27, -20, 52, -20, 52, -34, 27, -34], 'red'], [[54, 20, 79, 20, 79, 34, 54, 34], 'red'], [[54, -20, 79, -20, 79, -34, 54, -34], 'red'], [[81, 20, 106, 20, 106, 34, 81, 34], 'red'], [[81, -20, 106, -20, 106, -34, 81, -34], 'red'], [[108, 20, 133, 20, 133, 34, 108, 34], 'red'], [[108, -20, 133, -20, 133, -34, 108, -34], 'red'], [[135, 20, 160, 20, 160, 34, 135, 34], 'red'], [[135, -20, 160, -20, 160, -34, 135, -34], 'red'], [[162, 20, 187, 20, 187, 34, 162, 34], 'red'], [[162, -20, 187, -20, 187, -34, 162, -34], 'red'], [[189, 20, 214, 20, 214, 34, 189, 34], 'red'], [[189, -20, 214, -20, 214, -34, 189, -34], 'red'],
            [[-189, 38, -164, 38, -164, 52, -189, 52], 'goldenrod'], [[-189, -38, -164, -38, -164, -52, -189, -52], 'goldenrod'], [[-162, 38, -137, 38, -137, 52, -162, 52], 'goldenrod'], [[-162, -38, -137, -38, -137, -52, -162, -52], 'goldenrod'], [[-135, 38, -110, 38, -110, 52, -135, 52], 'goldenrod'], [[-135, -38, -110, -38, -110, -52, -135, -52], 'goldenrod'], [[-108, 38, -83, 38, -83, 52, -108, 52], 'goldenrod'], [[-108, -38, -83, -38, -83, -52, -108, -52], 'goldenrod'], [[-81, 38, -56, 38, -56, 52, -81, 52], 'goldenrod'], [[-81, -38, -56, -38, -56, -52, -81, -52], 'goldenrod'], [[-54, 38, -29, 38, -29, 52, -54, 52], 'goldenrod'], [[-54, -38, -29, -38, -29, -52, -54, -52], 'goldenrod'], [[-27, 38, -2, 38, -2, 52, -27, 52], 'goldenrod'], [[-27, -38, -2, -38, -2, -52, -27, -52], 'goldenrod'], [[0, 38, 25, 38, 25, 52, 0, 52], 'goldenrod'], [[0, -38, 25, -38, 25, -52, 0, -52], 'goldenrod'], [[27, 38, 52, 38, 52, 52, 27, 52], 'goldenrod'], [[27, -38, 52, -38, 52, -52, 27, -52], 'goldenrod'], [[54, 38, 79, 38, 79, 52, 54, 52], 'goldenrod'], [[54, -38, 79, -38, 79, -52, 54, -52], 'goldenrod'], [[81, 38, 106, 38, 106, 52, 81, 52], 'goldenrod'], [[81, -38, 106, -38, 106, -52, 81, -52], 'goldenrod'], [[108, 38, 133, 38, 133, 52, 108, 52], 'goldenrod'], [[108, -38, 133, -38, 133, -52, 108, -52], 'goldenrod'], [[135, 38, 160, 38, 160, 52, 135, 52], 'goldenrod'], [[135, -38, 160, -38, 160, -52, 135, -52], 'goldenrod'], [[162, 38, 187, 38, 187, 52, 162, 52], 'goldenrod'], [[162, -38, 187, -38, 187, -52, 162, -52], 'goldenrod'],
            [[-162, 56, -137, 56, -137, 70, -162, 70], 'cyan'], [[-162, -56, -137, -56, -137, -70, -162, -70], 'cyan'], [[-135, 56, -110, 56, -110, 70, -135, 70], 'cyan'], [[-135, -56, -110, -56, -110, -70, -135, -70], 'cyan'], [[-108, 56, -83, 56, -83, 70, -108, 70], 'cyan'], [[-108, -56, -83, -56, -83, -70, -108, -70], 'cyan'], [[-81, 56, -56, 56, -56, 70, -81, 70], 'cyan'], [[-81, -56, -56, -56, -56, -70, -81, -70], 'cyan'], [[-54, 56, -29, 56, -29, 70, -54, 70], 'cyan'], [[-54, -56, -29, -56, -29, -70, -54, -70], 'cyan'], [[-27, 56, -2, 56, -2, 70, -27, 70], 'cyan'], [[-27, -56, -2, -56, -2, -70, -27, -70], 'cyan'], [[0, 56, 25, 56, 25, 70, 0, 70], 'cyan'], [[0, -56, 25, -56, 25, -70, 0, -70], 'cyan'], [[27, 56, 52, 56, 52, 70, 27, 70], 'cyan'], [[27, -56, 52, -56, 52, -70, 27, -70], 'cyan'], [[54, 56, 79, 56, 79, 70, 54, 70], 'cyan'], [[54, -56, 79, -56, 79, -70, 54, -70], 'cyan'], [[81, 56, 106, 56, 106, 70, 81, 70], 'cyan'], [[81, -56, 106, -56, 106, -70, 81, -70], 'cyan'], [[108, 56, 133, 56, 133, 70, 108, 70], 'cyan'], [[108, -56, 133, -56, 133, -70, 108, -70], 'cyan'], [[135, 56, 160, 56, 160, 70, 135, 70], 'cyan'], [[135, -56, 160, -56, 160, -70, 135, -70], 'cyan'],
            [[-135, 74, -110, 74, -110, 88, -135, 88], 'green'], [[-135, -74, -110, -74, -110, -88, -135, -88], 'green'], [[-108, 74, -83, 74, -83, 88, -108, 88], 'green'], [[-108, -74, -83, -74, -83, -88, -108, -88], 'green'], [[-81, 74, -56, 74, -56, 88, -81, 88], 'green'], [[-81, -74, -56, -74, -56, -88, -81, -88], 'green'], [[-54, 74, -29, 74, -29, 88, -54, 88], 'green'], [[-54, -74, -29, -74, -29, -88, -54, -88], 'green'], [[-27, 74, -2, 74, -2, 88, -27, 88], 'green'], [[-27, -74, -2, -74, -2, -88, -27, -88], 'green'], [[0, 74, 25, 74, 25, 88, 0, 88], 'green'], [[0, -74, 25, -74, 25, -88, 0, -88], 'green'], [[27, 74, 52, 74, 52, 88, 27, 88], 'green'], [[27, -74, 52, -74, 52, -88, 27, -88], 'green'], [[54, 74, 79, 74, 79, 88, 54, 88], 'green'], [[54, -74, 79, -74, 79, -88, 54, -88], 'green'], [[81, 74, 106, 74, 106, 88, 81, 88], 'green'], [[81, -74, 106, -74, 106, -88, 81, -88], 'green'], [[108, 74, 133, 74, 133, 88, 108, 88], 'green'], [[108, -74, 133, -74, 133, -88, 108, -88], 'green'],
            [[-108, 92, -83, 92, -83, 106, -108, 106], 'red'], [[-108, -92, -83, -92, -83, -106, -108, -106], 'red'], [[-81, 92, -56, 92, -56, 106, -81, 106], 'red'], [[-81, -92, -56, -92, -56, -106, -81, -106], 'red'], [[-54, 92, -29, 92, -29, 106, -54, 106], 'red'], [[-54, -92, -29, -92, -29, -106, -54, -106], 'red'], [[-27, 92, -2, 92, -2, 106, -27, 106], 'red'], [[-27, -92, -2, -92, -2, -106, -27, -106], 'red'], [[0, 92, 25, 92, 25, 106, 0, 106], 'red'], [[0, -92, 25, -92, 25, -106, 0, -106], 'red'], [[27, 92, 52, 92, 52, 106, 27, 106], 'red'], [[27, -92, 52, -92, 52, -106, 27, -106], 'red'], [[54, 92, 79, 92, 79, 106, 54, 106], 'red'], [[54, -92, 79, -92, 79, -106, 54, -106], 'red'], [[81, 92, 106, 92, 106, 106, 81, 106], 'red'], [[81, -92, 106, -92, 106, -106, 81, -106], 'red'],
            [[-81, 110, -56, 110, -56, 124, -81, 124], 'goldenrod'], [[-81, -110, -56, -110, -56, -124, -81, -124], 'goldenrod'], [[-54, 110, -29, 110, -29, 124, -54, 124], 'goldenrod'], [[-54, -110, -29, -110, -29, -124, -54, -124], 'goldenrod'], [[-27, 110, -2, 110, -2, 124, -27, 124], 'goldenrod'], [[-27, -110, -2, -110, -2, -124, -27, -124], 'goldenrod'], [[0, 110, 25, 110, 25, 124, 0, 124], 'goldenrod'], [[0, -110, 25, -110, 25, -124, 0, -124], 'goldenrod'], [[27, 110, 52, 110, 52, 124, 27, 124], 'goldenrod'], [[27, -110, 52, -110, 52, -124, 27, -124], 'goldenrod'], [[54, 110, 79, 110, 79, 124, 54, 124], 'goldenrod'], [[54, -110, 79, -110, 79, -124, 54, -124], 'goldenrod'],
            [[-54, 128, -29, 128, -29, 142, -54, 142], 'cyan'], [[-54, -128, -29, -128, -29, -142, -54, -142], 'cyan'], [[-27, 128, -2, 128, -2, 142, -27, 142], 'cyan'], [[-27, -128, -2, -128, -2, -142, -27, -142], 'cyan'], [[0, 128, 25, 128, 25, 142, 0, 142], 'cyan'], [[0, -128, 25, -128, 25, -142, 0, -142], 'cyan'], [[27, 128, 52, 128, 52, 142, 27, 142], 'cyan'], [[27, -128, 52, -128, 52, -142, 27, -142], 'cyan']]
    }
    WALL_DESIGN = copy.deepcopy(WALL_MODELS)


class Menu:
    def __init__(self):
        self.height = Window.HEIGHT // 10
        self.y0 = (Window.Y_AXIS*2 - self.height) // 2

    def create_menu(self):
        self.create_restart()
        self.create_quit()

    def create_restart(self):
        glColor3f(*Window.COLORS["cyan"])
        arrow_middle = Line(-Window.X_AXIS+20, self.y0, -Window.X_AXIS+60, self.y0)
        arrow_top = Line(-Window.X_AXIS+20, self.y0, -Window.X_AXIS+40, self.y0+20)
        arrow_bottom = Line(-Window.X_AXIS+20, self.y0, -Window.X_AXIS+40, self.y0-20)

    def create_play(self):
        glColor3f(*Window.COLORS["goldenrod"])
        bar1 = Line(-5, self.y0+20, -5, self.y0-20)
        bar2 = Line(5, self.y0+20, 5, self.y0-20)

    def create_pause(self):
        glColor3f(*Window.COLORS["goldenrod"])
        a = Line(-15, self.y0 + 20, -15, self.y0 - 20)
        b = Line(-15, self.y0 - 20, 15, self.y0)
        c = Line(15, self.y0, -15, self.y0 + 20)

    def create_quit(self):
        glColor3f(*Window.COLORS["red"])
        cross1 = Line(Window.X_AXIS-20, self.y0+20, Window.X_AXIS-60, self.y0-20)
        cross2 = Line(Window.X_AXIS-60, self.y0+20, Window.X_AXIS-20, self.y0-20)


class BrickWall:
    def __init__(self):
        self.shift = 0
        self.speed = 0
        self.count = 1
        self.count_down = time()
        self.bricks = Game.WALL_DESIGN.pop(Game.LEVEL)
        # x = 7
        # y = 0
        # c = 0
        # while x <= 88:
        #     for i in range(-Window.X_AXIS+x, Window.X_AXIS-x, 27):
        #         self.bricks.append([[i, 2 + y, i + 25, 2 + y,
        #                              i + 25, 16 + y, i, 16 + y], Window.COLOR_CYCLE[c]])
        #         self.bricks.append([[i, -(16 + y), i + 25, -(16 + y),
        #                              i + 25, -(2 + y), i, -(2 + y)], Window.COLOR_CYCLE[c]])
        #     x += 27
        #     y += 18
        #     c += 1
        self.pause_time = 0
        # print(self.bricks)

    def create_bricks(self):
        for brick in self.bricks:
            glColor3f(*Window.COLORS[brick[1]])
            draw_square(*brick[0])


class Paddle:
    def __init__(self, r):
        self.shift = 0
        self.speed = 5
        self.shot = False
        self.ball_r = r
        self.color = Window.COLORS['lightGrey']
        self.missile_x = 0
        self.shift_x, self.shift_y = (0, 0)
        self.ball_dir = [random.choice([-1, 1]), 1]
        self.sanity = 0
        self.color_index = random.randrange(3)
        self.hit = 0
        self.width = 60

    def create_paddle(self):
        glColor3fv(self.color)
        self.x1 = -(self.width//2) + self.shift
        self.x2 = self.x1 + self.width
        self.y = -Window.Y_AXIS + 13
        self.paddle = [self.x1, self.y,  self.x2, self.y,           # packed the data for
                       self.x2, self.y+10,  self.x1, self.y+10]     # collision function
        draw_square(*self.paddle)

    def create_ball(self):
        self.ball_x = self.x1 + (self.width//2)
        self.ball_y = self.y + 22 + self.shift_y
        self.ball = [[self.ball_x, self.ball_y, self.ball_r, 1], Window.COLOR_CYCLE[self.color_index]]
        glColor3fv(Window.COLORS[self.ball[1]])
        draw_circle(*self.ball[0])

    def change_ball_color(self):
        self.hit += 1
        if self.hit == 6:
            if self.color_index == 0:
                self.color_index = 3
            else:
                self.color_index -= 1
            self.hit = 0

    def fire(self):
        self.ball_x = self.sanity + self.shift_x
        self.ball_y = self.y + 22 + self.shift_y
        self.ball = [[self.ball_x, self.ball_y, self.ball_r, 1], Window.COLOR_CYCLE[self.color_index]]
        glColor3fv(Window.COLORS[self.ball[1]])
        draw_circle(*self.ball[0])

    def reload(self):
        self.shift_x = 0
        self.ball_x = self.x1 + (self.width//2) + self.shift_x
        self.ball_dir = [random.choice([-1, 1]), 1]
        self.color_index = random.randrange(3)
        self.shot = False
        self.shift_y = 0

    def reset_paddle(self):
        self.shift = 0
        self.speed = 5
        self.x1 = -(self.width // 2) + self.shift
        self.x2 = self.x1 + self.width
        self.y = -Window.Y_AXIS + 13
        self.paddle = [self.x1, self.y, self.x2, self.y,  # packed the data for
                       self.x2, self.y + 10, self.x1, self.y + 10]  # collision function
        draw_square(*self.paddle)


# ------------ Game Logic ---------------
def collision(rect, circle):     # clash detection for bomb and paddle's projectile.
    testX = circle[0]            # credit: https://m.youtube.com/watch?v=r0wAEi86vTA
    testY = circle[1]

    if circle[0] < rect[0]:
        testX = rect[0]
    elif circle[0] > rect[2]:
        testX = rect[2]

    if circle[1] < rect[1]:
        testY = rect[1]
    elif circle[1] > rect[5]:
        testY = rect[5]

    disX = circle[0] - testX
    disY = circle[1] - testY

    dis = disX**2 + disY**2

    if dis < circle[2] + 205:
        return True

    return False


def clamp(value, minimum, maximum):
    return max(minimum, min(value, maximum))


def vector_direction(target):
    compass = [
        np.array([0.0, 1.0]),  # up
        np.array([1.0, 0.0]),  # right
        np.array([0.0, -1.0]),  # down
        np.array([-1.0, 0.0])  # left
    ]
    max_val = 0.0
    best_match = -1
    for i in range(4):
        dot_product = np.dot(target / np.linalg.norm(target), compass[i])
        if dot_product > max_val:
            max_val = dot_product
            best_match = i
    return best_match


class Direction:
    UP = (2,)
    RIGHT = (1,)
    DOWN = (0, -1)
    LEFT = (3,)


def check_collision(rect, circle):
    # get center point of circle first
    center = np.array([circle[0] + circle[2], circle[1] + circle[2]])

    # calculate AABB info (center, half-extents)
    aabb_half_extents = np.array([abs(rect[0]-rect[2]) / 2.0, abs(rect[1]-rect[7]) / 2.0])
    aabb_center = np.array([rect[0] + aabb_half_extents[0], rect[1] + aabb_half_extents[1]])

    # get difference vector between both centers
    difference = center - aabb_center

    # clamp the difference vector to the range [-aabb_half_extents, aabb_half_extents]
    clamped = np.clip(difference, -aabb_half_extents, aabb_half_extents)

    # add clamped value to AABB_center and we get the value of box closest to circle
    closest = aabb_center + clamped

    # retrieve vector between center circle and closest point AABB and check if length <= radius
    difference = closest - center
    error_correction = 0
    if vector_direction(difference) in Direction.DOWN:  # bottom
        error_correction = 10
    elif vector_direction(difference) in Direction.UP:   # top
        error_correction = 17
    elif vector_direction(difference) in Direction.RIGHT:   # right
        error_correction = 0
    elif vector_direction(difference) in Direction.LEFT:   # left
        error_correction = 6
    if np.linalg.norm(difference) <= circle[2]+error_correction:
        return True, vector_direction(difference)

    return False, Direction.UP


def game_over():
    Game.OVER = True
    if Game.LIFE == 0:
        print(f"Game Over! Score: {Game.Score}")
        paddle.color = Window.COLORS['red']
    else:
        print(f"You Have Escaped! \nThank You For Playing! Score: {Game.Score}")
        paddle.reset_paddle()
        paddle.color = Window.COLORS['green']


def restart_game():
    print("Starting Over")
    Game.OVER = False
    Game.PAUSE = False
    Game.LIFE = 3
    Game.GROUND_ZERO = 0
    Game.Score = 0
    Game.T1 = time()
    Game.LEVEL = 1
    Game.WALL_DESIGN = copy.deepcopy(Game.WALL_MODELS)
    paddle.reset_paddle()
    paddle.color = Window.COLORS['lightGrey']
    paddle.reload()
    brickWall.bricks = Game.WALL_DESIGN.pop(Game.LEVEL)


def level_up():
    if len(Game.WALL_DESIGN) != 0:
        print(f"Level{Game.LEVEL} Completed! Score: {Game.Score}")
        Game.LEVEL += 1
        brickWall.bricks = Game.WALL_DESIGN.pop(Game.LEVEL)
        paddle.reset_paddle()
        paddle.reload()
    else:
        game_over()


# ------------ Event Handlers --------------
def keyboardListener(key, x, y):
    if not Game.OVER:
        if not Game.PAUSE:
            if key == b'a':
                if paddle.x1 > Window.WALL_LEFT[2]+15:
                    paddle.shift -= 15
            if key == b'd':
                if paddle.x2 < Window.WALL_RIGHT[0]-15:
                    paddle.shift += 15
            if key == b' ' and not paddle.shot:
                paddle.shot = True
                paddle.sanity = paddle.x1 + (paddle.width//2) + paddle.shift_x   # value is assigned here so that balls x coordinate
                                                # doesn't change with paddle after being shot
        if key == b'p':
            Game.PAUSE = not Game.PAUSE
    if key == b'r':
        restart_game()
    if key == b'\x1b':
        print(f"Goodbye! Score: {Game.Score}")
        glutLeaveMainLoop()

    glutPostRedisplay()


def specialKeyListener(key, x, y):
    if not Game.OVER and not Game.PAUSE:
        if key == GLUT_KEY_LEFT:
            if paddle.x1 > Window.WALL_LEFT[2]+15:
                paddle.shift -= 15
        if key == GLUT_KEY_RIGHT:
            if paddle.x2 < Window.WALL_RIGHT[0]-15:
                paddle.shift += 15
    glutPostRedisplay()


def mouseListener(button, state, x, y):  # /#/x, y is the x-y of the screen (2D)
    if button == GLUT_LEFT_BUTTON:
        if state == GLUT_DOWN:  # // 2 times?? in ONE click? -- solution is checking DOWN or UP

            # pause game
            if Window.X_AXIS-40 <= x <= Window.X_AXIS+40 and 0 <= y <= 55 and not Game.OVER:
                Game.PAUSE = not Game.PAUSE
                # keeps track of pause duration so that bomb creation time doesn't change
                if Game.PAUSE:
                    brickWall.pause_time = time() - brickWall.count_down
                else:
                    brickWall.count_down = time() - brickWall.pause_time

            # restart game
            elif 0 <= x <= 85 and 0 <= y <= 55:
                restart_game()

            # close game
            elif Window.WIDTH-80 <= x <= Window.WIDTH and 0 <= y <= 55:
                print(f"Goodbye! Score: {Game.Score}")
                glutLeaveMainLoop()

    glutPostRedisplay()


# ------------------ GUI -----------------
def display():
    # //clear the display
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glClearColor(0, 0, 0, 0)  # //color black
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    # //load the correct matrix -- MODEL-VIEW matrix
    glMatrixMode(GL_MODELVIEW)
    # //initialize the matrix
    glLoadIdentity()
    # //now give three info
    # //1. where is the camera (viewer)?
    # //2. where is the camera looking?
    # //3. Which direction is the camera's UP direction?
    gluLookAt(0, 0, 200, 0, 0, 0, 0, 1, 0)
    glMatrixMode(GL_MODELVIEW)

    Game.T0 = time()
    menu.create_menu()
    paddle.create_paddle()

    # Game boundary wall
    glColor3fv(Window.COLORS["lightGrey"])
    draw_square(*Window.WALL_LEFT)
    draw_square(*Window.WALL_RIGHT)
    draw_square(*Window.TOP)
    draw_square(*Window.BOTTOM)

    if Game.PAUSE:
        menu.create_pause()
    else:
        menu.create_play()
    if not Game.OVER:
        brickWall.create_bricks()
        if paddle.shot:
            paddle.fire()
        else:
            paddle.create_ball()


    glutSwapBuffers()


def animate():
    glutPostRedisplay()
    if not Game.PAUSE and not Game.OVER:
        t1 = time()
        delta_time = round((t1-Game.T0) * 100)

        # code for ball shift
        if paddle.shot:
            paddle.shift_x += delta_time * paddle.ball_dir[0]
            paddle.shift_y += delta_time * paddle.ball_dir[1]
            if paddle.ball_y <= -Window.Y_AXIS + 10:
                Game.LIFE -= 1
                if Game.LIFE <= 0:
                    game_over()
                else:
                    paddle.reload()
            # else:
            if collision(Window.TOP, paddle.ball[0]):
                paddle.ball_dir[1] = -1
                paddle.change_ball_color()
            if collision(Window.WALL_RIGHT, paddle.ball[0]):
                paddle.ball_dir[0] = -1
                paddle.change_ball_color()
            if collision(Window.WALL_LEFT, paddle.ball[0]):
                paddle.ball_dir[0] = 1
                paddle.change_ball_color()
            if collision(paddle.paddle, paddle.ball[0]):
                paddle.ball_dir[1] = 1
                # if
                paddle.change_ball_color()
        else:
            paddle.ball_x = paddle.x1 + 30 + paddle.shift_x
        # check collision between ball each brick
        brick_index = 0
        while brick_index < len(brickWall.bricks):
            brick = brickWall.bricks[brick_index]
            if paddle.shot:
                collided, direction = check_collision(brick[0], paddle.ball[0])
                if collided:
                    if brick[1] == paddle.ball[1]:  # check color
                        Game.Score += 1
                        brickWall.bricks.pop(brick_index)
                        # increase paddle's horizontal speed after reaching certain score
                        if (Game.Score % 5) == 0:
                            paddle.speed += 3
                        print(f"Score: {Game.Score}")
                        if brick[1] == paddle.ball[1] == 'purple':
                            Game.Score += len(brickWall.bricks)
                            level_up()
                        if brick[1] == paddle.ball[1] == 'lightGrey':
                            paddle.width += 10
                    if direction in Direction.DOWN:
                        paddle.ball_dir[1] = -1
                    elif direction in Direction.UP:
                        paddle.ball_dir[1] = 1
                    elif direction in Direction.RIGHT:
                        paddle.ball_dir[0] = -1
                    elif direction in Direction.LEFT:
                        paddle.ball_dir[0] = 1

                    # paddle.ball_dir[0] *= -1
                    # paddle.ball_dir[1] = -1
                    paddle.change_ball_color()
            brick_index += 1

        if len(brickWall.bricks) == 0:
            level_up()


        #
        #         # increase bomb speed every 25 seconds
        #         if t1 - Game.T1 >= 25:
        #             brickWall.speed += .28
        #             Game.T1 = time()


def init(): 
    # //clear the screen
    glClearColor(0, 0, 0, 0)
    # //load the PROJECTION matrix
    glMatrixMode(GL_PROJECTION)
    # //initialize the matrix
    glLoadIdentity()
    # //give PERSPECTIVE parameters
    gluPerspective(104, 1, 1, 1000.0)
    # **(important)**aspect ratio that determines the field of view in the X direction (horizontally).
    # The bigger this angle is, the more you can see of the world - but at the same time,
    # the objects you can see will become smaller.
    # //near distance
    # //far distance


glutInit()
glutInitWindowSize(Window.WIDTH, Window.HEIGHT)
glutInitWindowPosition(1500, 100)
glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB)  # //Depth, Double buffer, RGB color

# glutCreateWindow("My OpenGL Program")
wind = glutCreateWindow(b"Outbreak")
init()
menu = Menu()
brickWall = BrickWall()
paddle = Paddle(6)
Game.T1 = time()
glutDisplayFunc(display)  # display callback function
glutIdleFunc(animate)  # what you want to do in the idle time (when no drawing is occurring)

glutKeyboardFunc(keyboardListener)
glutSpecialFunc(specialKeyListener)
glutMouseFunc(mouseListener)

glutMainLoop()  # The main loop of OpenGL